using System.Runtime.CompilerServices;
using TimeClock.Core.Models.EntityDtos;

[assembly: InternalsVisibleTo("TimeClock.Api")]
[assembly: InternalsVisibleTo("TimeClock.Maui")]
namespace TimeClock.Core.Models.ApiDtos;
internal class UpdateEquipmentToUserDto : CanJson<UpdateEquipmentToUserDto>
{
    public UpdateEquipmentToUserDto() { }
    /// <summary>
    /// Unlink equipment from a user
    /// </summary>
    /// <param name="deviceId"></param>
    /// <param name="equipmentToUserId">the ID from the EquipmentToUser relationship</param>
    /// <param name="userId"></param>
    /// <param name="equipmentId"></param>
    /// <param name="actionById"></param>
    /// <param name="isPunchingOut">Whether a PunchEntry should be created to keep the User punched in.</param>
    /// <param name="punchEntry">Data required to generate a PunchEntry to close the WorkPeriod. The PunchEntry ID provided here will NOT be used. The WorkPeriod ID, Password, UserName and EffectiveDate provided will NOT be used.</param>
    /// <param name="jobType">If user will stay logged in, this parameter needs to be valid - so that the new WorkPeriod can be created using the correct value.</param>
    /// <param name="jobStep">If user will stay logged in, this parameter needs to be valid - so that the new WorkPeriod can be created using the correct value.</param>
    public UpdateEquipmentToUserDto(Guid deviceId, Guid equipmentToUserId, Guid userId, Guid equipmentId, Guid actionById, bool isPunchingOut, SlimPunchEntry punchEntry,
        Guid? jobType = null, Guid? jobStep = null)
    {
        this.DeviceId = deviceId;
        this.EquipmentToUserId = equipmentToUserId;
        this.UserId = userId;
        this.EquipmentId = equipmentId;
        this.ActionById = actionById;
        this.IsPunchingOut = isPunchingOut;
        this.PunchEntry = punchEntry;
        this.JobTypeId = jobType;
        this.JobStepId = jobStep;
    }
    /// <summary>
    /// Link equipment to a user
    /// </summary>
    /// <param name="deviceId"></param>
    /// <param name="userId"></param>
    /// <param name="equipmentId"></param>
    /// <param name="actionById"></param>
    /// <param name="jobType"></param>
    /// <param name="jobStep"></param>
    /// <param name="punchEntry">Data required to generate a PunchEntry to close the WorkPeriod. The PunchEntry ID provided here will NOT be used. The WorkPeriod ID, Password, UserName and EffectiveDate provided will NOT be used.</param>
    public UpdateEquipmentToUserDto(Guid deviceId, Guid userId, Guid equipmentId, Guid actionById, Guid? jobType, Guid? jobStep, SlimPunchEntry punchEntry)
    {
        this.DeviceId = deviceId;
        this.UserId = userId;
        this.EquipmentId = equipmentId;
        this.ActionById = actionById;
        this.JobTypeId = jobType;
        this.JobStepId = jobStep;
        this.IsPunchingOut = false;
        this.PunchEntry = punchEntry;
    }
    public Guid DeviceId { get; set; }
    public Guid ActionById { get; set; }
    /// <summary>
    /// Setting this value will unlink equipment from a user. 
    /// To link equipment to a user, leave this as null.
    /// A user must be unlinked from equipment before creating a link.
    /// </summary>
    public Guid? EquipmentToUserId { get; set; } = null;
    public Guid UserId { get; set; }
    public Guid EquipmentId { get; set; }
    public Guid? JobTypeId { get; set; }
    public Guid? JobStepId { get; set; }
    public bool IsPunchingOut { get; set; }
    public string? LocationDivisionCode { get; set; }
    public string? UnionCode { get; set; }
    /// <summary>
    /// WorkPeriod ID is used to find the WorkPeriod to attach. If not provided, the WorkPeriod will be found using DateTime, or a new WorkPeriod will be created. 
    /// Please note, providing a WorkPeriod ID will result in an exception if it is not found.
    /// </summary>
    public Guid? WorkPeriodId { get; set; }
    /// <summary>
    /// Please note, the ID for the punch entry is NOT used. 
    /// It is generated by the API.
    /// Data required to generate a PunchEntry to close the WorkPeriod. The PunchEntry ID provided here will NOT be used. The WorkPeriod ID, Password, UserName and EffectiveDate provided will NOT be used.
    /// </summary>
    public SlimPunchEntry PunchEntry {  get; set; }

}

internal class SlimPunchEntry
{
    public Guid? UserId { get; set; }
    public DateTime DateTime { get; set; }
    public double? Latitude { get; set; }
    public double? Longitude { get; set; }
    public PunchActionDto PunchAction { get; set; }
    public PunchTypeDto PunchType { get; set; }
    public Guid? JobTypeId { get; set; }
    public Guid? JobStepId { get; set; }
}