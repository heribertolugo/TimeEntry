// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeClock.Data;

#nullable disable

namespace TimeClock.Data.Migrations
{
    [DbContext(typeof(TimeClockContext))]
    partial class TimeClockContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TimeClock.Data.Models.AuthorizationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.ToTable("AuthorizationClaims", "timeclock");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59ddf3ba-7f8a-4ff9-b7dc-cab50abb0c99"),
                            RowId = 1,
                            Type = "CanSelectEquipment",
                            Value = "Can Select Equipment"
                        },
                        new
                        {
                            Id = new Guid("4e43c124-2e61-40bd-a8c2-222c816a519e"),
                            RowId = 2,
                            Type = "CanViewOthersPunches",
                            Value = "Can View Others Punches"
                        },
                        new
                        {
                            Id = new Guid("570a8132-f550-4bf9-b757-9192f0ff3a49"),
                            RowId = 3,
                            Type = "CanEditOthersPunches",
                            Value = "Can Edit Others Punches"
                        },
                        new
                        {
                            Id = new Guid("46e16cb7-0939-457f-832e-b39c25ffd196"),
                            RowId = 4,
                            Type = "CanConfigureApp",
                            Value = "Can Configure App"
                        },
                        new
                        {
                            Id = new Guid("8bc49e7a-ba30-4bf9-8a52-f73b69da7ae0"),
                            RowId = 5,
                            Type = "CanCreateEmployee",
                            Value = "Can Create Employee"
                        });
                });

            modelBuilder.Entity("TimeClock.Data.Models.Barcode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("ActivatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("DeactivatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeactivatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("DeactivatedById");

                    b.HasIndex("UserId");

                    b.ToTable("Barcodes", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JdeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex(new[] { "Name" }, "IX_Departments")
                        .IsUnique();

                    b.ToTable("Departments", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.DepartmentsToLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("LocationId");

                    b.HasIndex(new[] { "DepartmentId", "LocationId" }, "IX_DepartmentsToLocation")
                        .IsUnique();

                    b.ToTable("DepartmentsToLocations", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("ConfiguredById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentsToLocationsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FailureCount")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastActionOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedOutOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RefreshTokenIssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("ConfiguredById");

                    b.HasIndex("DepartmentsToLocationsId");

                    b.HasIndex(new[] { "Name" }, "IX_Devices")
                        .IsUnique();

                    b.ToTable("Devices", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("EquipmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("JdeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex(new[] { "Sku", "Name" }, "IX_Equipments")
                        .IsUnique();

                    b.ToTable("Equipments", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.EquipmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JdeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex(new[] { "Name" }, "IX_EquipmentTypes")
                        .IsUnique();

                    b.ToTable("EquipmentTypes", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.EquipmentsToDepartmentLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("DepartmentsToLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("JdeId")
                        .HasColumnType("int");

                    b.Property<Guid>("LinkedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LinkedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("DepartmentsToLocationId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("LinkedById");

                    b.ToTable("EquipmentsToDepartmentLocations", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.EquipmentsToUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("JdeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("JobStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LinkedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LinkedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LinkedOnEffective")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<DateTime?>("UnLinkedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UnLinkedOnEffective")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UnlinkedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("EquipmentId");

                    b.HasIndex("JobStepId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("LinkedById");

                    b.HasIndex("UnlinkedById");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkPeriodId");

                    b.ToTable("EquipmentsToUsers", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.EventAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("EventDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())")
                        .HasComment("Date and Time when event occurred. Should be specified in UTC format.");

                    b.Property<DateTime>("EventDateOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(CONVERT (date, SYSUTCDATETIME()))")
                        .HasComment("Date only portion of EventDate. Used for creating the indexed value.");

                    b.Property<string>("EventDescription")
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3000)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex(new[] { "EventDateOnly", "EntityType" }, "IX_EventAudits");

                    b.HasIndex(new[] { "EventDateOnly" }, "IX_EventAudits_DateOnly");

                    b.ToTable("EventAudits", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.JobStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JdeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.ToTable("JobSteps", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.JobType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JdeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.ToTable("JobTypes", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.JobTypeStepToEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("UnionCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("EquipmentId");

                    b.HasIndex("JobStepId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("JobTypeStepToEquipments", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.JobTypeStepToUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("JobStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("JobStepId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("UserId", "JobTypeId", "JobStepId")
                        .IsUnique()
                        .HasFilter("[JobTypeId] IS NOT NULL AND [JobStepId] IS NOT NULL");

                    b.ToTable("JobTypeStepToUsers", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("DivisionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JdeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex(new[] { "Name" }, "IX_Locations")
                        .IsUnique();

                    b.ToTable("Locations", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.PunchEntriesCurrentState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("PunchEntriesHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PunchEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid?>("StablePunchEntriesHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StableStatus")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComputedColumnSql("[timeclock].[GetStablePunchStatus]([Id])", false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComputedColumnSql("[timeclock].[GetPunchStatus]([Id])", false);

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("PunchEntriesHistoryId")
                        .IsUnique();

                    b.HasIndex("PunchEntryId")
                        .IsUnique();

                    b.HasIndex("StablePunchEntriesHistoryId")
                        .IsUnique()
                        .HasFilter("[StablePunchEntriesHistoryId] IS NOT NULL");

                    b.ToTable("PunchEntriesCurrentStates", "timeclock", t =>
                        {
                            t.HasTrigger("Enable_NonDeterminate_Calculated_Columns");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("TimeClock.Data.Models.PunchEntriesHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("ActionById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EffectiveDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("IndexedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("convert(date, getdate())");

                    b.Property<Guid?>("JobStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("PunchEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PunchType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<DateTime?>("UtcTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    b.HasIndex("ActionById");

                    b.HasIndex("DeviceId");

                    b.HasIndex("JobStepId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("PunchEntryId");

                    b.HasIndex(new[] { "IndexedDate" }, "IC_PunchEntriesHistory_IndexedDate");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "IndexedDate" }, "IC_PunchEntriesHistory_IndexedDate"));

                    b.ToTable("PunchEntriesHistories", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.PunchEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("UserId"));

                    b.HasIndex("WorkPeriodId");

                    b.ToTable("PunchEntries", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.SentEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SentTo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.ToTable("SentEmails", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.UnregisteredDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UnregisteredDevices", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("DefaultJobStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DefaultJobTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentsToLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("FailureCount")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<int?>("JdeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastActionOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("LockedOutOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrimaryEmail")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid?>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SupervisorJdeId")
                        .HasColumnType("int");

                    b.Property<string>("UnionCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("DefaultJobStepId");

                    b.HasIndex("DefaultJobTypeId");

                    b.HasIndex("DepartmentsToLocationId");

                    b.HasIndex("SupervisorJdeId");

                    b.HasIndex(new[] { "EmployeeNumber" }, "IX_Users")
                        .IsUnique();

                    b.HasIndex(new[] { "JdeId" }, "IX_Users_JdeId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserName" }, "IX_Users_UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AuthorizationClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("AuthorizationClaimId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "AuthorizationClaimId")
                        .IsUnique();

                    b.ToTable("UserClaims", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.WorkPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<double>("HoursWorked")
                        .HasColumnType("float");

                    b.Property<bool?>("IsPreviousMissingPunch")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("[timeclock].[IsPreviousMissingPunch]([Id])", false);

                    b.Property<DateOnly>("PayPeriodEnd")
                        .HasColumnType("date");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    b.HasIndex("UserId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("UserId"), false);

                    b.HasIndex(new[] { "WorkDate" }, "IC_WorkPeriods_WorkDate");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "WorkDate" }, "IC_WorkPeriods_WorkDate"));

                    b.ToTable("WorkPeriods", "timeclock", t =>
                        {
                            t.HasTrigger("Enable_Nondeterminate_Computed_Column");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("TimeClock.Data.Models.WorkPeriodStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("JdeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("WorkPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasAlternateKey("RowId"));

                    b.HasIndex("WorkPeriodId");

                    b.ToTable("WorkPeriodStatusHistories", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.WorkPeriodsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasAlternateKey("RowId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkPeriodsAudits", "timeclock");
                });

            modelBuilder.Entity("TimeClock.Data.Models.Barcode", b =>
                {
                    b.HasOne("TimeClock.Data.Models.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedById")
                        .HasConstraintName("FK_Barcodes_Users_DeactivatedBy");

                    b.HasOne("TimeClock.Data.Models.User", "User")
                        .WithMany("Barcodes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Barcodes_Users");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeClock.Data.Models.DepartmentsToLocation", b =>
                {
                    b.HasOne("TimeClock.Data.Models.Department", "Department")
                        .WithMany("DepartmentsToLocations")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentsToLocations_Departments");

                    b.HasOne("TimeClock.Data.Models.Location", "Location")
                        .WithMany("DepartmentsToLocations")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentsToLocations_Locations");

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TimeClock.Data.Models.Device", b =>
                {
                    b.HasOne("TimeClock.Data.Models.User", "ConfiguredBy")
                        .WithMany()
                        .HasForeignKey("ConfiguredById")
                        .IsRequired()
                        .HasConstraintName("FK_Devices_Users");

                    b.HasOne("TimeClock.Data.Models.DepartmentsToLocation", "DepartmentsToLocations")
                        .WithMany("Devices")
                        .HasForeignKey("DepartmentsToLocationsId")
                        .IsRequired()
                        .HasConstraintName("FK_Devices_DepartmentsToLocations");

                    b.Navigation("ConfiguredBy");

                    b.Navigation("DepartmentsToLocations");
                });

            modelBuilder.Entity("TimeClock.Data.Models.Equipment", b =>
                {
                    b.HasOne("TimeClock.Data.Models.EquipmentType", "EquipmentType")
                        .WithMany("Equipment")
                        .HasForeignKey("EquipmentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Equipments_EquipmentTypes");

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("TimeClock.Data.Models.EquipmentsToDepartmentLocation", b =>
                {
                    b.HasOne("TimeClock.Data.Models.DepartmentsToLocation", "DepartmentsToLocation")
                        .WithMany("EquipmentsToDepartmentLocations")
                        .HasForeignKey("DepartmentsToLocationId")
                        .IsRequired()
                        .HasConstraintName("FK_EquipmentsToDepartmentLocations_DepartmentsToLocation");

                    b.HasOne("TimeClock.Data.Models.Equipment", "Equipment")
                        .WithMany("EquipmentsToLocations")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK_EquipmentsToDepartmentLocations_Equipments");

                    b.HasOne("TimeClock.Data.Models.User", "LinkedBy")
                        .WithMany("EquipmentsToDepartmentLocations")
                        .HasForeignKey("LinkedById")
                        .IsRequired()
                        .HasConstraintName("FK_EquipmentsToDepartmentLocations_Users");

                    b.Navigation("DepartmentsToLocation");

                    b.Navigation("Equipment");

                    b.Navigation("LinkedBy");
                });

            modelBuilder.Entity("TimeClock.Data.Models.EquipmentsToUser", b =>
                {
                    b.HasOne("TimeClock.Data.Models.Equipment", "Equipment")
                        .WithMany("EquipmentsToUsers")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK_EquipmentsToUsers_Equipments");

                    b.HasOne("TimeClock.Data.Models.JobStep", "JobStep")
                        .WithMany()
                        .HasForeignKey("JobStepId")
                        .HasConstraintName("FK_EquipmentsToUsers_JobSteps");

                    b.HasOne("TimeClock.Data.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("FK_EquipmentsToUsers_JobTypes");

                    b.HasOne("TimeClock.Data.Models.User", "LinkedBy")
                        .WithMany()
                        .HasForeignKey("LinkedById")
                        .IsRequired()
                        .HasConstraintName("FK_EquipmentsToUsers_Users_LinkedBy");

                    b.HasOne("TimeClock.Data.Models.User", "UnlinkedBy")
                        .WithMany()
                        .HasForeignKey("UnlinkedById")
                        .HasConstraintName("FK_EquipmentsToUsers_Users_UnlinkedBy");

                    b.HasOne("TimeClock.Data.Models.User", "User")
                        .WithMany("EquipmentsToUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_EquipmentsToUsers_Users");

                    b.HasOne("TimeClock.Data.Models.WorkPeriod", "WorkPeriod")
                        .WithMany("EquipmentsToUsers")
                        .HasForeignKey("WorkPeriodId")
                        .IsRequired()
                        .HasConstraintName("FK_EquipmentsToUsers_WorkPeriods");

                    b.Navigation("Equipment");

                    b.Navigation("JobStep");

                    b.Navigation("JobType");

                    b.Navigation("LinkedBy");

                    b.Navigation("UnlinkedBy");

                    b.Navigation("User");

                    b.Navigation("WorkPeriod");
                });

            modelBuilder.Entity("TimeClock.Data.Models.JobTypeStepToEquipment", b =>
                {
                    b.HasOne("TimeClock.Data.Models.Equipment", "Equipment")
                        .WithMany("JobTypeStepToEquipment")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK_JobTypeStepToEquipments_Equipments");

                    b.HasOne("TimeClock.Data.Models.JobStep", "JobStep")
                        .WithMany()
                        .HasForeignKey("JobStepId")
                        .HasConstraintName("FK_JobTypeStepToEquipments_JobSteps");

                    b.HasOne("TimeClock.Data.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("FK_JobTypeStepToEquipments_JobTypes");

                    b.Navigation("Equipment");

                    b.Navigation("JobStep");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("TimeClock.Data.Models.JobTypeStepToUser", b =>
                {
                    b.HasOne("TimeClock.Data.Models.JobStep", "JobStep")
                        .WithMany()
                        .HasForeignKey("JobStepId")
                        .HasConstraintName("FK_JobTypeStepToUsers_JobSteps");

                    b.HasOne("TimeClock.Data.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("FK_JobTypeStepToUsers_JobTypes");

                    b.HasOne("TimeClock.Data.Models.User", "User")
                        .WithMany("JobTypeSteps")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_JobTypeStepToUsers_Users");

                    b.Navigation("JobStep");

                    b.Navigation("JobType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeClock.Data.Models.PunchEntriesCurrentState", b =>
                {
                    b.HasOne("TimeClock.Data.Models.PunchEntriesHistory", "PunchEntriesHistory")
                        .WithOne("CurrentState")
                        .HasForeignKey("TimeClock.Data.Models.PunchEntriesCurrentState", "PunchEntriesHistoryId")
                        .IsRequired()
                        .HasConstraintName("FK_PunchEntriesCurrentStates_PunchEntriesHistories");

                    b.HasOne("TimeClock.Data.Models.PunchEntry", "PunchEntry")
                        .WithOne("CurrentState")
                        .HasForeignKey("TimeClock.Data.Models.PunchEntriesCurrentState", "PunchEntryId")
                        .IsRequired()
                        .HasConstraintName("FK_PunchEntriesCurrentStates_PunchEntries");

                    b.HasOne("TimeClock.Data.Models.PunchEntriesHistory", "StablePunchEntriesHistory")
                        .WithOne()
                        .HasForeignKey("TimeClock.Data.Models.PunchEntriesCurrentState", "StablePunchEntriesHistoryId")
                        .HasConstraintName("FK_PunchEntriesCurrentStates_PunchEntriesHistories_Stable");

                    b.Navigation("PunchEntriesHistory");

                    b.Navigation("PunchEntry");

                    b.Navigation("StablePunchEntriesHistory");
                });

            modelBuilder.Entity("TimeClock.Data.Models.PunchEntriesHistory", b =>
                {
                    b.HasOne("TimeClock.Data.Models.User", "ActionBy")
                        .WithMany("PunchEntriesHistories")
                        .HasForeignKey("ActionById")
                        .IsRequired()
                        .HasConstraintName("FK_PunchEntriesHistories_Users");

                    b.HasOne("TimeClock.Data.Models.Device", "Device")
                        .WithMany("PunchEntriesHistories")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_PunchEntriesHistories_Devices");

                    b.HasOne("TimeClock.Data.Models.JobStep", "JobStep")
                        .WithMany()
                        .HasForeignKey("JobStepId")
                        .HasConstraintName("FK_PunchEntriesHistories_JobSteps");

                    b.HasOne("TimeClock.Data.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .HasConstraintName("FK_PunchEntriesHistories_JobTypes");

                    b.HasOne("TimeClock.Data.Models.PunchEntry", "PunchEntry")
                        .WithMany("PunchEntriesHistories")
                        .HasForeignKey("PunchEntryId")
                        .IsRequired()
                        .HasConstraintName("FK_PunchEntriesHistories_PunchEntries");

                    b.Navigation("ActionBy");

                    b.Navigation("Device");

                    b.Navigation("JobStep");

                    b.Navigation("JobType");

                    b.Navigation("PunchEntry");
                });

            modelBuilder.Entity("TimeClock.Data.Models.PunchEntry", b =>
                {
                    b.HasOne("TimeClock.Data.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_PunchEntries_Devices");

                    b.HasOne("TimeClock.Data.Models.User", "User")
                        .WithMany("PunchEntries")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PunchEntries_Users");

                    b.HasOne("TimeClock.Data.Models.WorkPeriod", "WorkPeriod")
                        .WithMany("PunchEntries")
                        .HasForeignKey("WorkPeriodId")
                        .IsRequired()
                        .HasConstraintName("FK_PunchEntries_WorkPeriods");

                    b.Navigation("Device");

                    b.Navigation("User");

                    b.Navigation("WorkPeriod");
                });

            modelBuilder.Entity("TimeClock.Data.Models.User", b =>
                {
                    b.HasOne("TimeClock.Data.Models.JobStep", "DefaultJobStep")
                        .WithMany()
                        .HasForeignKey("DefaultJobStepId")
                        .HasConstraintName("FK_Users_JobSteps");

                    b.HasOne("TimeClock.Data.Models.JobType", "DefaultJobType")
                        .WithMany()
                        .HasForeignKey("DefaultJobTypeId");

                    b.HasOne("TimeClock.Data.Models.DepartmentsToLocation", "DepartmentsToLocation")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentsToLocationId")
                        .HasConstraintName("FK_Users_DepartmentsToLocations");

                    b.HasOne("TimeClock.Data.Models.User", "Supervisor")
                        .WithMany("Subordinates")
                        .HasForeignKey("SupervisorJdeId")
                        .HasPrincipalKey("JdeId")
                        .HasConstraintName("FK_Users_Users_Supervisors");

                    b.Navigation("DefaultJobStep");

                    b.Navigation("DefaultJobType");

                    b.Navigation("DepartmentsToLocation");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("TimeClock.Data.Models.UserClaim", b =>
                {
                    b.HasOne("TimeClock.Data.Models.AuthorizationClaim", "AuthorizationClaim")
                        .WithMany("UserClaims")
                        .HasForeignKey("AuthorizationClaimId")
                        .IsRequired()
                        .HasConstraintName("FK_AuthorizationClaims_Users");

                    b.HasOne("TimeClock.Data.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserClaims_Users");

                    b.Navigation("AuthorizationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeClock.Data.Models.WorkPeriod", b =>
                {
                    b.HasOne("TimeClock.Data.Models.User", "User")
                        .WithMany("WorkPeriods")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkPeriods_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeClock.Data.Models.WorkPeriodStatusHistory", b =>
                {
                    b.HasOne("TimeClock.Data.Models.WorkPeriod", "WorkPeriod")
                        .WithMany("WorkPeriodStatusHistories")
                        .HasForeignKey("WorkPeriodId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkPeriodStatusHistory_WorkPeriod");

                    b.Navigation("WorkPeriod");
                });

            modelBuilder.Entity("TimeClock.Data.Models.WorkPeriodsAudit", b =>
                {
                    b.HasOne("TimeClock.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkPeriodsAudits_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeClock.Data.Models.AuthorizationClaim", b =>
                {
                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("TimeClock.Data.Models.Department", b =>
                {
                    b.Navigation("DepartmentsToLocations");
                });

            modelBuilder.Entity("TimeClock.Data.Models.DepartmentsToLocation", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("EquipmentsToDepartmentLocations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TimeClock.Data.Models.Device", b =>
                {
                    b.Navigation("PunchEntriesHistories");
                });

            modelBuilder.Entity("TimeClock.Data.Models.Equipment", b =>
                {
                    b.Navigation("EquipmentsToLocations");

                    b.Navigation("EquipmentsToUsers");

                    b.Navigation("JobTypeStepToEquipment");
                });

            modelBuilder.Entity("TimeClock.Data.Models.EquipmentType", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("TimeClock.Data.Models.Location", b =>
                {
                    b.Navigation("DepartmentsToLocations");
                });

            modelBuilder.Entity("TimeClock.Data.Models.PunchEntriesHistory", b =>
                {
                    b.Navigation("CurrentState");
                });

            modelBuilder.Entity("TimeClock.Data.Models.PunchEntry", b =>
                {
                    b.Navigation("CurrentState")
                        .IsRequired();

                    b.Navigation("PunchEntriesHistories");
                });

            modelBuilder.Entity("TimeClock.Data.Models.User", b =>
                {
                    b.Navigation("Barcodes");

                    b.Navigation("EquipmentsToDepartmentLocations");

                    b.Navigation("EquipmentsToUsers");

                    b.Navigation("JobTypeSteps");

                    b.Navigation("PunchEntries");

                    b.Navigation("PunchEntriesHistories");

                    b.Navigation("Subordinates");

                    b.Navigation("UserClaims");

                    b.Navigation("WorkPeriods");
                });

            modelBuilder.Entity("TimeClock.Data.Models.WorkPeriod", b =>
                {
                    b.Navigation("EquipmentsToUsers");

                    b.Navigation("PunchEntries");

                    b.Navigation("WorkPeriodStatusHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
